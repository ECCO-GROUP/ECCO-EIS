This README file describes the ECCO Adjoint Tool, set up on
Pleiades. (09 August 2022. Ichiro Fukumori; fukumori@jpl.nasa.gov)

=========================================
Quick guide to run the Adjoint Tool
=========================================

Skip to step c) if you have already run setup_adj.csh. "pfe25>" denotes
the Unix prompt on Pleiades.

a) Create and cd to some work directory. 

    pfe25>mkdir USRDIR

    pfe25>cd USRDIR

b) Set up Adjoint Tool.

    pfe25>source PUBLICDIR/setup_adj.csh

c) Specify objective function (follow the prompt). 

    pfe25>adj.x 

d) Submit PBS job to run the Adjoint Tool's computation.

    pfe25>qsub pbs_adj.csh

e) Results will be generated in subdirectory emu_adj_*****/adj_result.


============
Description 
============

The Adjoint Tool computes the sensitivity of the ECCO ocean model
(V4r4) with respect to its controls (surface forcing); i.e., adjoint
gradient. The tool is useful for studying causal relationships between
the ocean and its forcing.

The ocean model is the flux-forced version of ECCO's Version 4 release
4 (V4r4) ocean state estimate. The Adjoint Tool computes gradients of
a user-defined function of the model's core model state variables, the
"Objective Function" (OBJF), with respect to the model's surface
forcing, the controls. The core model state variables are 
   sea level (m), 
   ocean bottom pressure (in equivalent meters of sea level),
   temperature (deg C), 
   salinity (PSU), 
   velocity (m/s). 
The controls are 
   upward freshwater flux (empmr, kg/m2/s), 
   downward surface pressure loading (pload, N/m2), 
   net upward heat flux (qnet, W/m2), 
   net upward shortwave radiation (qsw, W/m2), 
   net upward salt flux (saltflux, g/m2/s), 
   net downward salt plume flux (spflx, g/m2/s), 
   westward wind stress (tauu, N/m2), 
   southward wind stress (tauv, N/m2). 
Note that heat and salf fluxes consist of those only acting on the
top-most layer of the model (qnet-qsw and saltflux-spflx) and those
that penetrate and get distributed over the water column (qsw,
spflx). 

The Tool's user-specified Objective Function can either be a state
variable at a particular location or a spatially weighted sum of a
state variable. In time, the Objective Function can be a time-mean of
either a particular month, a particular year, or an average over
V4r4's entire integration period (12Z, 01 January 1992 to 12Z 31
December 2017). The control is defined weekly, beginning 12Z, 01
January 1992, and interpolated linearly in time.

To run the Tool, do the following.  

Skip to step 3 if you have already run setup_adj.csh. "pfe25>" denotes
the Unix prompt on Pleiades.

1) Create and cd to some work directory. Results and pertinent files
   will be created under this directory.

    pfe25>mkdir USRDIR

    pfe25>cd USRDIR

2) Set up Adjoint Tool.

    pfe25>source PUBLICDIR/setup_adj.csh

   This will create files in USRDIR necessary to run the tool. 

3) Specify Objective Function. 

   Respond to the prompt (?) of adj.x interactively. For instance,
   the example below selects the Objective Function to be
        i) A function of Sea Level
        ii) Weighed spatially by MASK specified in file MASK_FILE
	iii) Averaged over the 312th month of V4r4

    pfe25>adj.x

    Define objective function (OBJF) ...
    Available VARIABLES are ...
       1) SSH (m)
       2) OBP (equivalent sea level m)
       3) THETA (deg C)
       4) SALT (PSU) 
       5) UV (m/s)
      Enter VARIABLE ... (1- 5) ?
   1
    ..... objective function will be of SSH
   
    VARIABLE at a point location (1) or  VARIABLE weighted in space (2) ... (1/2)?
   2
    ... objective function will be SUM( MASK*VARIABLE )
   
    Upload MASK (binary native format) before proceeding ...
   
       Enter MASK filename ... ?
   MASK_FILE
   Mask file : MASK_FILE
   Masks maximum absolute value =   0.5480E-03
      at (i,j) =   33   246
   
    VARIABLE at what time?  Choose among ...
       ... average over Month (m), Year (y)
       ... or over entire model integration Period (p)
       (NOTE: Controls are weekly averages.)
   
    ... Enter m/y/p ?
   m
    V4r4 integrates from 1/1/1992 12Z to 12/31/2017 12Z
    over 312 months
    Enter OBJF month ... (1-312)?
   312

 Wrote adj.info
 Wrote adj.str


   Program adj.x will generate the following files: 
   (File attributes for demonstration.) 

-rw-r--r-- 1 ifukumor g26113    298 Aug  9 18:47 adj.info
-rw-r--r-- 1 ifukumor g26113     23 Aug  9 18:47 adj.str
-rw-r--r-- 1 ifukumor g26113   3467 Aug  9 18:47 data
-rw-r--r-- 1 ifukumor g26113    317 Aug  9 18:47 data.ecco
lrwxrwxrwx 1 ifukumor g26113     14 Aug  9 18:47 objf_mask_C -> MASK_FILE
-rw-r--r-- 1 ifukumor g26113   1248 Aug  9 18:47 objf_mask_T
-rwxr-xr-x 1 ifukumor g26113   2839 Aug  9 18:47 pbs_adj.csh

   adj.info: Description (text) of specified Objective Function. 
   adj.str: Short-hand string of specified Objective Function used
        to name sub-directory where computation will take place
        (run_directory). The example above will generate the string
	     1_m_312_MASK_FILE
	from whith the run_directory will be named 
	     emu_adj_1_m_312_MASK_FILE
   data: Namelist file used by MITgcm based on the Tool's canonical
        data.ad file, tailored to the Objective Function (length of
        integration, nTimeSteps). 
   data.ecco: Namelist file used by MITgcm based on the Tool's
        canonical data.ecco.ad file, tailored to the Objective
        Function (variable, spatial and temporal masks). 
   objf_mask_C: Spatial mask defining Objective Function. 
   objf_mask_T: Temporal mask defining Objective Function. 
   pbs_adj.csh: PBS script to compute adjoint gradient based on the
        Tool's canonical script file pbs_adj.csh_orig, tailored to the
        Objective Function (walltime).
   

5) Submit PBS job to run the Adjoint Tool's computation. The
   computation will integrate the ECCO model forward and its adjoint
   backwards. 

    pfe25>qsub pbs_adj.csh

   For reference, an objective function requiring model (forward and
   adjoint) integration of 150-days (3600 time-steps) requires 1.5
   hours walltime on Pleiades.  A 12-year integration would require 
   45-hours walltime. 

6) Results of the computation will be generated in sub-directory
   adj_result under the "run_directory" (cf step 4).  The results
   include the following files.

    adj.info: Description (text) of the run's Objective Function.

    adxx_*****.0000000129.data
        Adjoint gradient of objective function, where ***** is 
        the control; 
	   empmr      'kg/m2/s (upward freshwater flux)' 	
	   pload      'N/m2 (downward surface pressure loading)'	
	   qnet	      'W/m2 (net upward heat flux)'		
	   qsw	      'W/m2 (net upward shortwave radiation)'	
	   saltflux   'g/m2/s (net upward salt flux)'		
	   spflx      'g/m2/s (net downward salt plume flux)'	
	   tauu	      'N/m2 (westward wind stress)'		
	   tauv	      'N/m2 (southward wind stress)'             
	Each file is a 2-d time-series of the Objective Function's
        gradient with respect to the individual controls. The n'th
        record (2-d field) of each file is the gradient with respect
        to the n'th week of the control (week centered starting from
        12Z 01 January 1992.)


hereherehere 


	Result of the perturbation in MITgcm diagnostic output format;
        "data" are binary, "meta" are text files with "data" file
        information. The "*****" in the filenames are model time-steps
        (center step of average); each file corresponds to a
        particular instant. The fields are on the model's native grid.

        Files "state_2d_set1_day" have daily mean dynamic sea level
        (ssh) and ocean bottom pressure (obp). Files
        "state_2d_set1_mon" have monthly mean dynamic sea level (ssh)
        and ocean bottom pressure (obp). Units are meters in
        equivalent sea level for both.

	Files "state_3d_set1_mon" have monthly mean temperature
	(theta; deg C), salinity (salt; PSU), i-direction velocity
	(uvel; m/s), and j-direction velocity (vvel; m/s). 

        Results are normalized as the model's response to a unit
        perturbation of the control (control's unit noted by
        pert_nml.x in step 4). For reference, the units for the
        different controls are;

	ctrl (1) = 'empmr'   'kg/m2/s (upward freshwater flux)' 
        ctrl (2) = 'pload'   'N/m2 (downward surface pressure loading)'
	ctrl (3) = 'qnet'    'W/m2 (net upward heat flux)'
        ctrl (4) = 'qsw'     'W/m2 (net upward shortwave radiation)'
	ctrl (5) = 'saltflux''g/m2/s (net upward salt flux)'
        ctrl (6) = 'spflx'   'g/m2/s (net downward salt plume flux)'
	ctrl (7) = 'tauu'    'N/m2 (westward wind stress)'
        ctrl (8) = 'tauv'    'N/m2 (southward wind stress)'       

        Example code to read temperature, theta (the first record;
        irec), from file state_3d_set1_mon.0000012396.data as variable
        "fvar".

    FORTRAN
    --------
      integer nx, ny, nr
      parameter (nx=90, ny=1170, nr=50)
      integer irec
      real*4 fvar(nx,ny,nr)
      character*256 f_in

      f_in = 'state_3d_set1_mon.0000012396.data'
      open(60, file=f_in, access='direct',
     $     recl=nx*ny*nr*4, form='unformatted')

      irec = 1
      read(60,rec=irec) fvar


    IDL
    ---
      nx = 90
      ny = 1170
      nr = 50

      f_in = 'state_3d_set1_mon.0000012396.data'
      close,1 & openr,1,f_in,/swap_if_little_endian
      d_file = assoc(1,fltarr(nx,ny,nr))

      irec = 0
      fvar = d_file(irec) 


    MATLAB
    -------
      nx = 90; 
      ny = 1170; 
      nr = 50;

      f_in = 'state_3d_set1_mon.0000012396.data';
      fid=fopen(f_in,'r','ieee-be');

      irec = 1; 
      status=fseek(fid,(irec-1)*(nx*ny*nr*4),'bof');
      fvar=fread(fid, [nx*ny*nr], 'single');
      fvar=reshape(fvar, [nx,ny,nr]);
      fclose(fid);

  
    PYTHON
    -------
      import numpy as np 
      nx = 90
      ny = 1170 
      nr = 50

      f_in = 'state_3d_set1_mon.0000012396.data'
      dt =  np.dtype([ ('fld', '>f4', (nr,ny,nx))])
      d_file = np.fromfile(f_in,dtype=dt)

      irec = 0 
      fvar = d_file['fld'][irec]

